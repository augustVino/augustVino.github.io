(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{669:function(t,n,e){"use strict";e.r(n);var a=e(59),c=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前后端分离模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离模式"}},[t._v("#")]),t._v(" 前后端分离模式")]),t._v(" "),e("h2",{attrs:{id:"_1-前后端逻辑混合开发模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-前后端逻辑混合开发模式"}},[t._v("#")]),t._v(" 1. 前后端逻辑混合开发模式")]),t._v(" "),e("p",[t._v("这种开发模式在现在来看几乎没有什么优点，但是在很多互联网公司依然在用，我想这大概是历史原因造成的吧，也有可能缺乏技术体系的整体思想，但是也不能完全否定其优点，与第二种开发模式相比较。")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 优点：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" 用户体验好，在相同的网络条件和业务复杂度以及硬件环境下，他可以快速进行首屏展示，避免ajax请求所带来的渲染延时。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" 有利于seo搜索引擎优化。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 方便静态化，在访问高峰期可以将某些访问量大并且业务数据大部分不变的页面生成静态页面进行缓存，有利于快速渲染。\n\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 缺点：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" 耦合度太高，在协作开发的时候前端的开发人员要与后端的开发人员互相等待来完成整体的功能，而且后端开发人员需要了解前端 \n   的页面结构来填充逻辑代码，大大降低开发效率并且一旦出问题无法快速定位问题。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" 不易维护，由于对于一个页面的维护需要牵扯到两端的开发人员来共同进行维护，在需求变更后容易出现bug。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 对后端开发语言进行了强依赖，一旦这两种语言参杂在一起，对于后端来讲前端是无法复用的。\n")]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701092-57116"}},[t._v("copy success")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. 用户体验好，在相同的网络条件和业务复杂度以及硬件环境下，他可以快速进行首屏展示，避免ajax请求所带来的渲染延时。\n2. 有利于seo搜索引擎优化。\n3. 方便静态化，在访问高峰期可以将某些访问量大并且业务数据大部分不变的页面生成静态页面进行缓存，有利于快速渲染。\n\n### 缺点：\n1. 耦合度太高，在协作开发的时候前端的开发人员要与后端的开发人员互相等待来完成整体的功能，而且后端开发人员需要了解前端 \n   的页面结构来填充逻辑代码，大大降低开发效率并且一旦出问题无法快速定位问题。\n2. 不易维护，由于对于一个页面的维护需要牵扯到两端的开发人员来共同进行维护，在需求变更后容易出现bug。\n3. 对后端开发语言进行了强依赖，一旦这两种语言参杂在一起，对于后端来讲前端是无法复用的。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701092-57116","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("copy")])]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701092-1843"}},[t._v("Copy successed")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. 用户体验好，在相同的网络条件和业务复杂度以及硬件环境下，他可以快速进行首屏展示，避免ajax请求所带来的渲染延时。\n2. 有利于seo搜索引擎优化。\n3. 方便静态化，在访问高峰期可以将某些访问量大并且业务数据大部分不变的页面生成静态页面进行缓存，有利于快速渲染。\n\n### 缺点：\n1. 耦合度太高，在协作开发的时候前端的开发人员要与后端的开发人员互相等待来完成整体的功能，而且后端开发人员需要了解前端 \n   的页面结构来填充逻辑代码，大大降低开发效率并且一旦出问题无法快速定位问题。\n2. 不易维护，由于对于一个页面的维护需要牵扯到两端的开发人员来共同进行维护，在需求变更后容易出现bug。\n3. 对后端开发语言进行了强依赖，一旦这两种语言参杂在一起，对于后端来讲前端是无法复用的。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701092-1843","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"Copy failed",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("Copy")])])])]),e("h2",{attrs:{id:"_2-ajax跨域请求前后端分离模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-ajax跨域请求前后端分离模式"}},[t._v("#")]),t._v(" 2. ajax跨域请求前后端分离模式")]),t._v(" "),e("p",[t._v("这种分离模式可以在一定程度上弥补第一种开发模式的不足。")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 优点：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" 前后端的逻辑不需要混合在一起，两端的开发人员基本不需要参与对方的代码，大大提升了整体的开发效率，也方便定位问题。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" 与第三种开发模式相比较，前端人员不需要关注中间服务器的代码编写，从一定程度上减少了工作量。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 在部署方面前后端可以分别部署，从一定程度上提升了前端的价值。\n\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 缺点：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" 首屏局部板块的渲染需要等到ajax请求数据返回后才能进行完全的展示，在网络比较慢的情况下表现的尤为明显。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" 在性能方面ajax请求的暴涨，会影响渲染性能。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 异步请求的嵌套会让业务代码晦涩难懂。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("4.")]),t._v(" 不利于搜索引擎优化。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("5.")]),t._v(" 需要对请求的异常情况进行视图逻辑的处理。\n")]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701093-53591"}},[t._v("copy success")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. 前后端的逻辑不需要混合在一起，两端的开发人员基本不需要参与对方的代码，大大提升了整体的开发效率，也方便定位问题。\n2. 与第三种开发模式相比较，前端人员不需要关注中间服务器的代码编写，从一定程度上减少了工作量。\n3. 在部署方面前后端可以分别部署，从一定程度上提升了前端的价值。\n\n### 缺点：\n1. 首屏局部板块的渲染需要等到ajax请求数据返回后才能进行完全的展示，在网络比较慢的情况下表现的尤为明显。\n2. 在性能方面ajax请求的暴涨，会影响渲染性能。\n3. 异步请求的嵌套会让业务代码晦涩难懂。\n4. 不利于搜索引擎优化。\n5. 需要对请求的异常情况进行视图逻辑的处理。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701093-53591","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("copy")])]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701093-41768"}},[t._v("Copy successed")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. 前后端的逻辑不需要混合在一起，两端的开发人员基本不需要参与对方的代码，大大提升了整体的开发效率，也方便定位问题。\n2. 与第三种开发模式相比较，前端人员不需要关注中间服务器的代码编写，从一定程度上减少了工作量。\n3. 在部署方面前后端可以分别部署，从一定程度上提升了前端的价值。\n\n### 缺点：\n1. 首屏局部板块的渲染需要等到ajax请求数据返回后才能进行完全的展示，在网络比较慢的情况下表现的尤为明显。\n2. 在性能方面ajax请求的暴涨，会影响渲染性能。\n3. 异步请求的嵌套会让业务代码晦涩难懂。\n4. 不利于搜索引擎优化。\n5. 需要对请求的异常情况进行视图逻辑的处理。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701093-41768","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"Copy failed",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("Copy")])])])]),e("h2",{attrs:{id:"_3-nodejs前后端分离模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-nodejs前后端分离模式"}},[t._v("#")]),t._v(" 3. nodejs前后端分离模式")]),t._v(" "),e("p",[t._v("这也是我目前非常推崇的一种分离模式。")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 优点：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" node的异步特性，一个页面是被几十个HTML片段（每个片段一个文件）拼装成，之前PHP同步include这几十个片段，一定是串行 \n   的，Node可以异步，读文件可以并行，一旦这些片段中也包含业务逻辑，异步的优势就很明显了，真正做到哪个文件先渲染完就先 \n   输出显示。前端机的文件系统越复杂，页面的组成片段越多，这种异步的提速效果就越明显。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" 前端发挥空间大大提升，能玩的东西变多，例如websocket，前端可以自己来玩并且在controller层和model层上有更多的发挥 \n   空间，比如在node端自己做静态数据缓存等。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 服务器优势，node本身内置服务器功能，几行代码就可以启动一个服务器，免去了对apache，wamp等服务器的依赖。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("4.")]),t._v(" 服务端和浏览器端公用一种语言降低了学习成本，写一套代码便可前后端同时运行。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("5.")]),t._v(" 前后端彻底分离，node端只要启动一个http-proxy进行api请求转发类似于nginx的代理功能，前端只需要玩转json就可以，也 \n   不存在跨域问题。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("6.")]),t._v(" 服务器分别部署，可以单独进行优化，也方便node做静态化。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("7.")]),t._v(" 可以进行首屏的渲染，目前像vuejs，react都可以在服务端渲染页面然后输出静态html代码，从而弥补了ajax请求的不足。\n\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" 缺点：")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" 对于一般前端开发来说，觉得nodejs学习门槛比较高，牵扯到服务端就望而却步，其实没什么学的，很好上手。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("2.")]),t._v(" node的单线程机制在部署的时候需要启动一个监控进程，在node挂了后能自动重启，例如在linux上配置一个supervisor。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("3.")]),t._v(" 在node端调试相对比较麻烦，没有像java那样的远程调试机制，开发者一般通过console.log进行调试，当然也可以是用debug \n   模式启动node来进行调试。\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("4.")]),t._v(" 对开发人员的编码能力要求比较高，因为单线程的缘故，所以尽量避免写出同步执行的代码，对于cpu密集型的运算尽量不要让 \n   node来做。\n")]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701093-37720"}},[t._v("copy success")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. node的异步特性，一个页面是被几十个HTML片段（每个片段一个文件）拼装成，之前PHP同步include这几十个片段，一定是串行 \n   的，Node可以异步，读文件可以并行，一旦这些片段中也包含业务逻辑，异步的优势就很明显了，真正做到哪个文件先渲染完就先 \n   输出显示。前端机的文件系统越复杂，页面的组成片段越多，这种异步的提速效果就越明显。\n2. 前端发挥空间大大提升，能玩的东西变多，例如websocket，前端可以自己来玩并且在controller层和model层上有更多的发挥 \n   空间，比如在node端自己做静态数据缓存等。\n3. 服务器优势，node本身内置服务器功能，几行代码就可以启动一个服务器，免去了对apache，wamp等服务器的依赖。\n4. 服务端和浏览器端公用一种语言降低了学习成本，写一套代码便可前后端同时运行。\n5. 前后端彻底分离，node端只要启动一个http-proxy进行api请求转发类似于nginx的代理功能，前端只需要玩转json就可以，也 \n   不存在跨域问题。\n6. 服务器分别部署，可以单独进行优化，也方便node做静态化。\n7. 可以进行首屏的渲染，目前像vuejs，react都可以在服务端渲染页面然后输出静态html代码，从而弥补了ajax请求的不足。\n\n### 缺点：\n\n1. 对于一般前端开发来说，觉得nodejs学习门槛比较高，牵扯到服务端就望而却步，其实没什么学的，很好上手。\n2. node的单线程机制在部署的时候需要启动一个监控进程，在node挂了后能自动重启，例如在linux上配置一个supervisor。\n3. 在node端调试相对比较麻烦，没有像java那样的远程调试机制，开发者一般通过console.log进行调试，当然也可以是用debug \n   模式启动node来进行调试。\n4. 对开发人员的编码能力要求比较高，因为单线程的缘故，所以尽量避免写出同步执行的代码，对于cpu密集型的运算尽量不要让 \n   node来做。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701093-37720","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("copy")])]),e("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[e("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1589775701093-6830"}},[t._v("Copy successed")]),e("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"### 优点：\n1. node的异步特性，一个页面是被几十个HTML片段（每个片段一个文件）拼装成，之前PHP同步include这几十个片段，一定是串行 \n   的，Node可以异步，读文件可以并行，一旦这些片段中也包含业务逻辑，异步的优势就很明显了，真正做到哪个文件先渲染完就先 \n   输出显示。前端机的文件系统越复杂，页面的组成片段越多，这种异步的提速效果就越明显。\n2. 前端发挥空间大大提升，能玩的东西变多，例如websocket，前端可以自己来玩并且在controller层和model层上有更多的发挥 \n   空间，比如在node端自己做静态数据缓存等。\n3. 服务器优势，node本身内置服务器功能，几行代码就可以启动一个服务器，免去了对apache，wamp等服务器的依赖。\n4. 服务端和浏览器端公用一种语言降低了学习成本，写一套代码便可前后端同时运行。\n5. 前后端彻底分离，node端只要启动一个http-proxy进行api请求转发类似于nginx的代理功能，前端只需要玩转json就可以，也 \n   不存在跨域问题。\n6. 服务器分别部署，可以单独进行优化，也方便node做静态化。\n7. 可以进行首屏的渲染，目前像vuejs，react都可以在服务端渲染页面然后输出静态html代码，从而弥补了ajax请求的不足。\n\n### 缺点：\n\n1. 对于一般前端开发来说，觉得nodejs学习门槛比较高，牵扯到服务端就望而却步，其实没什么学的，很好上手。\n2. node的单线程机制在部署的时候需要启动一个监控进程，在node挂了后能自动重启，例如在linux上配置一个supervisor。\n3. 在node端调试相对比较麻烦，没有像java那样的远程调试机制，开发者一般通过console.log进行调试，当然也可以是用debug \n   模式启动node来进行调试。\n4. 对开发人员的编码能力要求比较高，因为单线程的缘故，所以尽量避免写出同步执行的代码，对于cpu密集型的运算尽量不要让 \n   node来做。\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1589775701093-6830","data-mdic-notify-delay":"1000","data-mdic-copy-fail-text":"Copy failed",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("Copy")])])])]),t._v(" "),e("star-star"),t._v(" "),e("comment-comment"),t._v(" "),e("back-to-top")],1)}),[],!1,null,null,null);n.default=c.exports}}]);